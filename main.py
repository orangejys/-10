import logging
import sqlite3
import random
import html
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect('math_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS materials (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            section_id INTEGER,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            FOREIGN KEY (section_id) REFERENCES sections (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS quotes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            author TEXT NOT NULL,
            quote_text TEXT NOT NULL
        )
    ''')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    fill_initial_data(cursor)
    
    conn.commit()
    conn.close()

def fill_initial_data(cursor):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("SELECT COUNT(*) FROM sections")
    if cursor.fetchone()[0] > 0:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã
    sections = [
        ("üìê –ê–∫—Å–∏–æ–º—ã", "–ê–∫—Å–∏–æ–º–∞—Ç–∏–∫–∞ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª"),
        ("üìä –°—É–ø—Ä–µ–º—É–º –∏ –∏–Ω—Ñ–∏–º—É–º", "–í–µ—Ä—Ö–Ω–∏–µ –∏ –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏ –º–Ω–æ–∂–µ—Å—Ç–≤"),
        ("üéØ –ü—Ä–µ–¥–µ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–¢–µ–æ—Ä–∏—è –ø—Ä–µ–¥–µ–ª–æ–≤ –∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å"),
        ("üîç –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–í–∞–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"),
        ("üõ†Ô∏è –ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è", "–ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á")
    ]
    cursor.executemany("INSERT INTO sections (name, description) VALUES (?, ?)", sections) 
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ê–∫—Å–∏–æ–º
    axioms_materials = [
        (1, "16 –∞–∫—Å–∏–æ–º ‚Ñù", """
üìö 16 –ê–ö–°–ò–û–ú –í–ï–©–ï–°–¢–í–ï–ù–ù–´–• –ß–ò–°–ï–õ

–ê–∫—Å–∏–æ–º—ã —Å–ª–æ–∂–µ–Ω–∏—è (A1-A4):
A1. (x + y) + z = x + (y + z) - –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
A2. x + y = y + x - –∫–æ–º–º—É—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å  
A3. ‚àÉ0: x + 0 = x - –Ω—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
A4. ‚àÄx ‚àÉ(-x): x + (-x) = 0 - –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

–ê–∫—Å–∏–æ–º—ã —É–º–Ω–æ–∂–µ–Ω–∏—è (A5-A8):
A5. (x¬∑y)¬∑z = x¬∑(y¬∑z) - –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
A6. x¬∑y = y¬∑x - –∫–æ–º–º—É—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
A7. ‚àÉ1‚â†0: x¬∑1 = x - –µ–¥–∏–Ω–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
A8. ‚àÄx‚â†0 ‚àÉx‚Åª¬π: x¬∑x‚Åª¬π = 1 - –æ–±—Ä–∞—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

–ê–∫—Å–∏–æ–º–∞ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–Ω–æ—Å—Ç–∏ (A9):
A9. (x + y)¬∑z = x¬∑z + y¬∑z

–ê–∫—Å–∏–æ–º—ã –ø–æ—Ä—è–¥–∫–∞ (A10-A15):
A10. x ‚â§ x - —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ—Å—Ç—å
A11. (x ‚â§ y ‚àß y ‚â§ z) ‚áí x ‚â§ z - —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å
A12. (x ‚â§ y ‚àß y ‚â§ x) ‚áí x = y - –∞–Ω—Ç–∏—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å
A13. x ‚â§ y ‚à® y ‚â§ x - –ª–∏–Ω–µ–π–Ω–∞—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ—Å—Ç—å
A14. x ‚â§ y ‚áí x + z ‚â§ y + z
A15. (0 ‚â§ x ‚àß 0 ‚â§ y) ‚áí 0 ‚â§ x¬∑y

–ê–∫—Å–∏–æ–º–∞ –ø–æ–ª–Ω–æ—Ç—ã (A16):
A16. ‚àÄX,Y‚äÇ‚Ñù, X‚â§Y ‚áí ‚àÉc‚àà‚Ñù: X‚â§c‚â§Y
        """),
        
        (1, "–ê–∫—Å–∏–æ–º–∞ –ø–æ–ª–Ω–æ—Ç—ã", """
üéØ –ê–ö–°–ò–û–ú–ê –ü–û–õ–ù–û–¢–´ (–ù–ï–ü–†–ï–†–´–í–ù–û–°–¢–ò)

–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:
–î–ª—è –ª—é–±—ã—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ X, Y ‚äÇ ‚Ñù —Ç–∞–∫–∏—Ö, —á—Ç–æ 
‚àÄx‚ààX ‚àÄy‚ààY: x ‚â§ y, 
—Å—É—â–µ—Å—Ç–≤—É–µ—Ç —á–∏—Å–ª–æ c ‚àà ‚Ñù —Ç–∞–∫–æ–µ, —á—Ç–æ 
‚àÄx‚ààX ‚àÄy‚ààY: x ‚â§ c ‚â§ y.

–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:
–ß–∏—Å–ª–æ–≤–∞—è –ø—Ä—è–º–∞—è –Ω–µ –∏–º–µ–µ—Ç "–¥—ã—Ä–æ–∫" - –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –¥–≤—É–º—è –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ –Ω–∞–π–¥—ë—Ç—Å—è —Ä–∞–∑–¥–µ–ª—è—é—â–µ–µ —á–∏—Å–ª–æ.

–ü—Ä–∏–º–µ—Ä:
X = {x ‚àà ‚Ñö: x¬≤ < 2}, Y = {x ‚àà ‚Ñö: x¬≤ > 2}
c = ‚àö2 ‚àâ ‚Ñö, –Ω–æ c ‚àà ‚Ñù
        """),
        
        (1, "–°–≤–æ–π—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π", """
‚öôÔ∏è –°–í–û–ô–°–¢–í–ê –û–ü–ï–†–ê–¶–ò–ô

–ò–∑ –∞–∫—Å–∏–æ–º —Å–ª–µ–¥—É—é—Ç:
1. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω—É–ª—è: –µ—Å–ª–∏ 0' - –¥—Ä—É–≥–æ–π –Ω—É–ª—å, —Ç–æ 0' = 0
2. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ: -x –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ
3. 0¬∑x = 0 –¥–ª—è –ª—é–±–æ–≥–æ x ‚àà ‚Ñù
4. (-1)¬∑x = -x
5. x¬∑y = 0 ‚áí (x=0 ‚à® y=0)
        """)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –°—É–ø—Ä–µ–º—É–º–∞ –∏ –∏–Ω—Ñ–∏–º—É–º–∞
    supremum_materials = [
        (2, "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", """
üìñ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø

–ú–Ω–æ–∂–µ—Å—Ç–≤–æ X ‚äÇ ‚Ñù –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è:
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å–≤–µ—Ä—Ö—É, –µ—Å–ª–∏ ‚àÉM‚àà‚Ñù: ‚àÄx‚ààX x ‚â§ M
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å–Ω–∏–∑—É, –µ—Å–ª–∏ ‚àÉm‚àà‚Ñù: ‚àÄx‚ààX x ‚â• m
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É

–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å (—Å—É–ø—Ä–µ–º—É–º):
sup X = min{M ‚àà ‚Ñù: ‚àÄx‚ààX x ‚â§ M}

–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å (–∏–Ω—Ñ–∏–º—É–º):
inf X = max{m ‚àà ‚Ñù: ‚àÄx‚ààX x ‚â• m}
        """),
        
        (2, "–°–≤–æ–π—Å—Ç–≤–∞ sup –∏ inf", """
üîß –°–í–û–ô–°–¢–í–ê SUP –ò INF

1. ‚àÄx‚ààX: x ‚â§ sup X, x ‚â• inf X
2. ‚àÄŒµ>0 ‚àÉx‚ààX: x > sup X - Œµ
3. ‚àÄŒµ>0 ‚àÉx‚ààX: x < inf X + Œµ
4. –ï—Å–ª–∏ X ‚äÇ Y, —Ç–æ inf Y ‚â§ inf X ‚â§ sup X ‚â§ sup Y
5. sup(X ‚à™ Y) = max{sup X, sup Y}
6. inf(X ‚à™ Y) = min{inf X, inf Y}

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ sup[0,1) = 1, inf[0,1) = 0
‚Ä¢ sup(0,1) = 1, inf(0,1) = 0
‚Ä¢ sup‚Ñï = +‚àû, inf‚Ñï = 1
        """),
        
        (2, "–ö—Ä–∏—Ç–µ—Ä–∏–π sup", """
üéØ –ö–†–ò–¢–ï–†–ò–ô –°–£–ü–†–ï–ú–£–ú–ê

–ß–∏—Å–ª–æ Œ± = sup X —Ç–æ–≥–¥–∞ –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞:
1. Œ± - –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: ‚àÄx‚ààX x ‚â§ Œ±
2. Œ± - –Ω–∞–∏–º–µ–Ω—å—à–∞—è –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: 
   ‚àÄŒµ>0 ‚àÉx‚ààX: x > Œ± - Œµ

–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:
Œ± = sup X ‚áî [‚àÄx‚ààX x‚â§Œ±] ‚àß [‚àÄŒ±'<Œ± ‚àÉx‚ààX x>Œ±']
        """)
    ]
    

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ü—Ä–µ–¥–µ–ª–æ–≤
    limits_materials = [
        (3, "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–µ–ª–∞", """
üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–ï–î–ï–õ–ê

–ß–∏—Å–ª–æ a –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥–µ–ª–æ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {x‚Çô}, –µ—Å–ª–∏:
‚àÄŒµ>0 ‚àÉN‚àà‚Ñï ‚àÄn‚â•N: |x‚Çô - a| < Œµ

–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ: lim(x‚Çô) = a –∏–ª–∏ x‚Çô ‚Üí a

–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:
–í –ª—é–±–æ–π Œµ-–æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–æ—á–∫–∏ a –ª–µ–∂–∞—Ç –≤—Å–µ —á–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–æ–º–µ—Ä–∞.
        """),
        
        (3, "–°–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–µ–ª–æ–≤", """
üîß –°–í–û–ô–°–¢–í–ê –ü–†–ï–î–ï–õ–û–í

1. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ lim x‚Çô = a –∏ lim x‚Çô = b, —Ç–æ a = b
2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç—å: —Å—Ö–æ–¥—è—â–∞—è—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
3. –ü—Ä–µ–¥–µ–ª –∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞: 
   –µ—Å–ª–∏ x‚Çô ‚â§ y‚Çô –∏ lim x‚Çô = a, lim y‚Çô = b, —Ç–æ a ‚â§ b
4. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
   ‚Ä¢ lim(x‚Çô + y‚Çô) = lim x‚Çô + lim y‚Çô
   ‚Ä¢ lim(x‚Çô ¬∑ y‚Çô) = lim x‚Çô ¬∑ lim y‚Çô
   ‚Ä¢ lim(x‚Çô / y‚Çô) = lim x‚Çô / lim y‚Çô (–µ—Å–ª–∏ lim y‚Çô ‚â† 0)
        """),
        
        (3, "–í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã", """
üìä –í–ê–ñ–ù–´–ï –ü–†–ï–î–ï–õ–´

1. lim(1/n) = 0
2. lim(1/n·µñ) = 0 (p > 0)
3. lim(q‚Åø) = 0 (|q| < 1)
4. lim(1 + 1/n)‚Åø = e ‚âà 2.71828
5. lim(‚Åø‚àön) = 1
6. lim(‚Åø‚àöa) = 1 (a > 0)
7. lim(n!/n‚Åø) = 0
        """),
        
        (3, "–ú–æ–Ω–æ—Ç–æ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", """
üìà –ú–û–ù–û–¢–û–ù–ù–´–ï –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò

–¢–µ–æ—Ä–µ–º–∞ (–í–µ–π–µ—Ä—à—Ç—Ä–∞—Å—Å–∞):
–í—Å—è–∫–∞—è –º–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ö–æ–¥–∏—Ç—Å—è.

‚Ä¢ –ï—Å–ª–∏ {x‚Çô} –Ω–µ—É–±—ã–≤–∞–µ—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Å–≤–µ—Ä—Ö—É, —Ç–æ 
  lim x‚Çô = sup{x‚Çô}
‚Ä¢ –ï—Å–ª–∏ {x‚Çô} –Ω–µ–≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Å–Ω–∏–∑—É, —Ç–æ
  lim x‚Çô = inf{x‚Çô}

–ü—Ä–∏–º–µ—Ä: x‚Çô = (1 + 1/n)‚Åø - –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ ‚áí —Å—Ö–æ–¥–∏—Ç—Å—è –∫ e
        """)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    proofs_materials = [
        (4, "‚àö2 –∏—Ä—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", """
üîç –ò–†–†–ê–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ ‚àö2

–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–æ–≥–æ:

–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º: ‚àö2 ‚àà ‚Ñö, —Ç.–µ. ‚àö2 = m/n, –≥–¥–µ m,n ‚àà ‚Ñï, –¥—Ä–æ–±—å –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º–∞

–¢–æ–≥–¥–∞: 
m¬≤ = 2n¬≤ ‚áí m¬≤ —á—ë—Ç–Ω–æ ‚áí m —á—ë—Ç–Ω–æ ‚áí m = 2k

–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º:
(2k)¬≤ = 2n¬≤ ‚áí 4k¬≤ = 2n¬≤ ‚áí n¬≤ = 2k¬≤ ‚áí n¬≤ —á—ë—Ç–Ω–æ ‚áí n —á—ë—Ç–Ω–æ

–ü–æ–ª—É—á–∏–ª–∏: m –∏ n –æ–±–∞ —á—ë—Ç–Ω—ã ‚áí –¥—Ä–æ–±—å m/n —Å–æ–∫—Ä–∞—Ç–∏–º–∞

–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º–æ—Å—Ç–∏.
        """),
        
        (4, "0 < 1", """
üî¢ –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û 0 < 1

1. –ü–æ –∞–∫—Å–∏–æ–º–µ (A7): 1 ‚â† 0
2. –ü–æ —Ç—Ä–∏—Ö–æ—Ç–æ–º–∏–∏ (A13): –ª–∏–±–æ 1 > 0, –ª–∏–±–æ 1 < 0
3. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º: 1 < 0
4. –¢–æ–≥–¥–∞ -1 > 0 (–ø–æ —Å–≤–æ–π—Å—Ç–≤—É)
5. (-1)¬∑(-1) = 1 > 0 (–ø–æ –∞–∫—Å–∏–æ–º–µ A15)
6. –ù–æ –µ—Å–ª–∏ 1 < 0, —Ç–æ 1 –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å > 0
7. –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ ‚áí 1 > 0
        """),
        
        (4, "–ü—Ä–∏–Ω—Ü–∏–ø –∏–Ω–¥—É–∫—Ü–∏–∏", """
üåÄ –ü–†–ò–ù–¶–ò–ü –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ò–ù–î–£–ö–¶–ò–ò

–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:
–ï—Å–ª–∏:
1. P(1) –∏—Å—Ç–∏–Ω–Ω–æ
2. ‚àÄn‚àà‚Ñï: P(n) ‚áí P(n+1)
–¢–æ–≥–¥–∞: ‚àÄn‚àà‚Ñï P(n) –∏—Å—Ç–∏–Ω–Ω–æ

–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—É –º–∏–Ω–∏–º—É–º–∞:

–ü—É—Å—Ç—å M = {n‚àà‚Ñï: P(n) –ª–æ–∂–Ω–æ}. 
–ï—Å–ª–∏ M ‚â† ‚àÖ, —Ç–æ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –º–∏–Ω–∏–º—É–º–∞ ‚àÉmin M = m.
–¢–æ–≥–¥–∞ m > 1 (—Ç.–∫. P(1) –∏—Å—Ç–∏–Ω–Ω–æ) –∏ P(m-1) –∏—Å—Ç–∏–Ω–Ω–æ.
–ù–æ —Ç–æ–≥–¥–∞ –ø–æ —É—Å–ª–æ–≤–∏—é 2 P(m) –∏—Å—Ç–∏–Ω–Ω–æ ‚áí –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ.
        """),
        
        (4, "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å ‚Ñï", """
‚àû –ë–ï–°–ö–û–ù–ï–ß–ù–û–°–¢–¨ –ú–ù–û–ñ–ï–°–¢–í–ê ‚Ñï

–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–æ–≥–æ:

–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º: ‚Ñï –∫–æ–Ω–µ—á–Ω–æ ‚áí ‚àÉmax ‚Ñï = M

–†–∞—Å—Å–º–æ—Ç—Ä–∏–º M + 1:
‚Ä¢ M + 1 > M (–ø–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é)
‚Ä¢ M + 1 ‚àà ‚Ñï (–ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é)

–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: M –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º–æ–º ‚áí ‚Ñï –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ.
        """)
    ]
    
 # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ú–µ—Ç–æ–¥–æ–≤ —Ä–µ—à–µ–Ω–∏—è
    methods_materials = [
        (5, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", """
üßÆ –ú–ï–¢–û–î –ù–ï–û–ü–†–ï–î–ï–õ–Å–ù–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í

–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥—Ä–æ–±–µ–π:

P(x)/Q(x) = A‚ÇÅ/(x-a‚ÇÅ) + A‚ÇÇ/(x-a‚ÇÇ) + ... + A‚Çñ/(x-a‚Çñ)

–ü—Ä–∏–º–µ—Ä:
(3x+1)/((x-1)(x+2)) = A/(x-1) + B/(x+2)

–£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å:
3x + 1 = A(x+2) + B(x-1)

–†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É:
{ A + B = 3
{ 2A - B = 1

–†–µ—à–µ–Ω–∏–µ: A = 4/3, B = 5/3
        """),
        
        (5, "–ú–µ—Ç–æ–¥ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–¥—É–∫—Ü–∏–∏", """
üåÄ –ú–ï–¢–û–î –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ò–ù–î–£–ö–¶–ò–ò

–®–∞–≥–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:
1. –ë–∞–∑–∞ –∏–Ω–¥—É–∫—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è n=1
2. –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥: 
   –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—ã–º –¥–ª—è n=k
   –î–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è n=k+1

–ü—Ä–∏–º–µ—Ä: 1 + 2 + ... + n = n(n+1)/2

–ë–∞–∑–∞: n=1: 1 = 1¬∑2/2 ‚úì
–ü–µ—Ä–µ—Ö–æ–¥: 
1+...+k+(k+1) = k(k+1)/2 + (k+1) = (k+1)(k/2+1) = (k+1)(k+2)/2
        """),
        
        (5, "–ó–∞–∂–∞—Ç–∏–µ (—Ç–µ–æ—Ä–µ–º–∞ –æ –¥–≤—É—Ö –º–∏–ª–∏—Ü–∏–æ–Ω–µ—Ä–∞—Ö)", """
üéØ –¢–ï–û–†–ï–ú–ê –û –ó–ê–ñ–ê–¢–û–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò

–ï—Å–ª–∏:
1. lim x‚Çô = lim y‚Çô = a
2. ‚àÉN: ‚àÄn‚â•N x‚Çô ‚â§ z‚Çô ‚â§ y‚Çô
–¢–æ–≥–¥–∞: lim z‚Çô = a

–ü—Ä–∏–º–µ—Ä:
lim (sin n)/n = 0, —Ç.–∫.
-1/n ‚â§ (sin n)/n ‚â§ 1/n
–∏ lim ¬±1/n = 0
        """),
        
        (5, "–ö—Ä–∏—Ç–µ—Ä–∏–π –ö–æ—à–∏", """
üìè –ö–†–ò–¢–ï–†–ò–ô –ö–û–®–ò –°–•–û–î–ò–ú–û–°–¢–ò

–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {x‚Çô} —Å—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≥–¥–∞ –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞:
‚àÄŒµ>0 ‚àÉN‚àà‚Ñï ‚àÄm,n‚â•N: |x‚Çò - x‚Çô| < Œµ

–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:
–ß–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∫–æ–ª—å —É–≥–æ–¥–Ω–æ –±–ª–∏–∑–∫–∏–º–∏ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å, –Ω–µ –∑–Ω–∞—è –ø—Ä–µ–¥–µ–ª–∞.
        """)
    ]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    all_materials = (axioms_materials + supremum_materials + 
                    limits_materials + proofs_materials + methods_materials)
    
    cursor.executemany(
        "INSERT INTO materials (section_id, title, content) VALUES (?, ?, ?)", 
        all_materials
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—ã
    quotes = [
        ("–ü–ª–∞—Ç–æ–Ω", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –¥—É—à–∏"),
        ("–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≤—ã—è–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫, —Å–∏–º–º–µ—Ç—Ä–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å"),
        ("–ü–∏—Ñ–∞–≥–æ—Ä", "–í—Å—ë –µ—Å—Ç—å —á–∏—Å–ª–æ"),
        ("–ï–≤–∫–ª–∏–¥", "–í –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –Ω–µ—Ç —Ü–∞—Ä—Å–∫–æ–π –¥–æ—Ä–æ–≥–∏"),
        ("–ê—Ä—Ö–∏–º–µ–¥", "–î–∞–π—Ç–µ –º–Ω–µ —Ç–æ—á–∫—É –æ–ø–æ—Ä—ã, –∏ —è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É –º–∏—Ä"),
        ("–ü–ª–∞—Ç–æ–Ω", "–ë–æ–≥ –≤–µ—á–Ω–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∑—É–µ—Ç"),
        ("–ü–∏—Ñ–∞–≥–æ—Ä", "–ù–∞—á–∞–ª–æ –µ—Å—Ç—å –ø–æ–ª–æ–≤–∏–Ω–∞ —Ü–µ–ª–æ–≥–æ"),
        ("–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å", "–ü—Ä–∏—Ä–æ–¥–∞ –±–æ–∏—Ç—Å—è –ø—É—Å—Ç–æ—Ç—ã"),
        ("–ï–≤–∫–ª–∏–¥", "–ß—Ç–æ –∏ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –¥–æ–∫–∞–∑–∞—Ç—å"),
        ("–ê—Ä—Ö–∏–º–µ–¥", "–≠–≤—Ä–∏–∫–∞!")
    ]
    cursor.executemany(
        "INSERT INTO quotes (author, quote_text) VALUES (?, ?)", 
        quotes
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_sections():
    conn = sqlite3.connect('math_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, description FROM sections ORDER BY id")
    sections = cursor.fetchall()
    conn.close()
    return sections

def get_section_materials(section_id):
    conn = sqlite3.connect('math_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, content FROM materials WHERE section_id = ?", (section_id,))
    materials = cursor.fetchall()
    conn.close()
    return materials

def get_random_quote():
    conn = sqlite3.connect('math_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT author, quote_text FROM quotes ORDER BY RANDOM() LIMIT 1")
    quote = cursor.fetchone()
    conn.close()
    return quote

def search_materials(query):
    conn = sqlite3.connect('math_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT m.id, m.title, m.content, s.name 
        FROM materials m 
        JOIN sections s ON m.section_id = s.id 
        WHERE m.title LIKE ? OR m.content LIKE ?
    ''', (f'%{query}%', f'%{query}%'))
    results = cursor.fetchall()
    conn.close()
    return results

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìê –ê–∫—Å–∏–æ–º—ã", callback_data="section_1")],
        [InlineKeyboardButton("üìä –°—É–ø—Ä–µ–º—É–º –∏ –∏–Ω—Ñ–∏–º—É–º", callback_data="section_2")],
        [InlineKeyboardButton("üéØ –ü—Ä–µ–¥–µ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="section_3")],
        [InlineKeyboardButton("üîç –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="section_4")],
        [InlineKeyboardButton("üõ†Ô∏è –ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è", callback_data="section_5")],
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–º–æ—â—å  
/quote - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
/search - –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º

*–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!*

üéØ *–†–∞–∑–¥–µ–ª—ã:*
‚Ä¢ –ê–∫—Å–∏–æ–º—ã –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
‚Ä¢ –°—É–ø—Ä–µ–º—É–º –∏ –∏–Ω—Ñ–∏–º—É–º  
‚Ä¢ –ü—Ä–µ–¥–µ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "random_quote":
        await show_random_quote(query)
    elif data == "search":
        await query.edit_message_text("üîç *–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º*\n\n–í–≤–µ–¥–∏—Ç–µ: /search <–∑–∞–ø—Ä–æ—Å>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: /search –ø—Ä–µ–¥–µ–ª", parse_mode='Markdown')
    elif data == "main_menu":
        await show_main_menu(query)
    elif data.startswith("section_"):
        section_id = int(data.split("_")[1])
        await show_section_materials(query, section_id)
    elif data.startswith("material_"):
        material_id = int(data.split("_")[1])
        await show_material(query, material_id)

async def show_main_menu(query):
    keyboard = [
        [InlineKeyboardButton("üìê –ê–∫—Å–∏–æ–º—ã", callback_data="section_1")],
        [InlineKeyboardButton("üìä –°—É–ø—Ä–µ–º—É–º –∏ –∏–Ω—Ñ–∏–º—É–º", callback_data="section_2")],
        [InlineKeyboardButton("üéØ –ü—Ä–µ–¥–µ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="section_3")],
        [InlineKeyboardButton("üîç –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="section_4")],
        [InlineKeyboardButton("üõ†Ô∏è –ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è", callback_data="section_5")],
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìö *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_section_materials(query, section_id):
    sections = get_sections()
    section_name = next((name for id, name, desc in sections if id == section_id), "–†–∞–∑–¥–µ–ª")
    materials = get_section_materials(section_id)
    
    if not materials:
        await query.edit_message_text(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section_name}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
    
    keyboard = []
    for material_id, title, content in materials:
        keyboard.append([InlineKeyboardButton(f"üìÑ {title}", callback_data=f"material_{material_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìö *{section_name}:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_material(query, material_id):
    conn = sqlite3.connect('math_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT m.title, m.content, s.name 
        FROM materials m 
        JOIN sections s ON m.section_id = s.id 
        WHERE m.id = ?
    ''', (material_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await query.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    title, content, section_name = row

    # –ö–Ω–æ–ø–∫–∏ ¬´–Ω–∞–∑–∞–¥¬ª
    section_id_for_back = next((sid for sid, name, _ in get_sections() if name == section_name), 1)
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É", callback_data=f"section_{section_id_for_back}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –≠–∫—Ä–∞–Ω–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML
    safe_title = html.escape(title)
    safe_content = html.escape(content)

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    header = f"<b>{safe_title}</b>\n\n"
    max_len = 4096  # –ª–∏–º–∏—Ç Telegram
    first_chunk_space = max_len - len(header)

    if len(safe_content) > first_chunk_space:
        parts = [safe_content[i:i+max_len] for i in range(0, len(safe_content), max_len)]
        await query.edit_message_text(
            header + parts[0],
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        for part in parts[1:]:
            await query.message.reply_text(part, parse_mode='HTML')
    else:
        await query.edit_message_text(
            header + safe_content,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def show_random_quote(query):
    author, quote_text = get_random_quote()
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"_{quote_text}_\n\n‚Äî *{author}*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "üîç *–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/search <–∑–∞–ø—Ä–æ—Å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/search –ø—Ä–µ–¥–µ–ª`\n"
            "‚Ä¢ `/search –∞–∫—Å–∏–æ–º–∞`\n"
            "‚Ä¢ `/search –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ`",
            parse_mode='Markdown'
        )
        return
    
    query = " ".join(context.args)
    results = search_materials(query)
    
    if not results:
        await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '*{query}*' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode='Markdown')
        return
    
    text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':*\n\n"
    for i, (material_id, title, content, section_name) in enumerate(results[:5], 1):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        preview = content.replace('\n', ' ')[:100] + "..." if len(content) > 100 else content
        text += f"{i}. **{title}** (*{section_name}*)\n{preview}\n\n"
    
    if len(results) > 5:
        text += f"*... –∏ –µ—â—ë {len(results) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def quote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    author, quote_text = get_random_quote()
    await update.message.reply_text(
        f"_{quote_text}_\n\n‚Äî *{author}*",
        parse_mode='Markdown'
    )

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("8373835216:AAF8m-ktBUj36hfgGm9x4pFwHPw_T2zfzck").build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("quote", quote_command))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
